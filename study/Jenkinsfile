pipeline {
    agent any
    tools {
        // JDK와 Maven이 사전에 Jenkins Global Tool Configuration에 등록되어 있어야 합니다.
        jdk 'JDK11'
        maven 'MAVEN_HOME'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                // SCM에서 소스코드 체크아웃
                checkout scm
            }
        }
        stage('Build Application') {
            steps {
                echo 'Building the application with Maven...'
                // study 디렉터리에서 Maven 빌드를 실행 (테스트는 스킵)
                dir('study') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                // study 디렉터리 내 Dockerfile을 사용해 Docker 이미지 빌드
                dir('study') {
                    sh 'docker build -t jonneedev/study-0.0.1-snapshot.jar .'
                }
            }
        }
        stage('Deploy Blue Version') {
            steps {
                echo 'Deploying the Blue version using Docker Compose...'
                // docker-compose.yml 파일은 /Users/hyunjae/IdeaProjects/FlyToTheMoon-main/study/ 경로에 위치
                // app_blue 서비스만 별도로 실행 (내부 포트 8888, 외부 노출은 8889)
                sh 'docker-compose -f docker-compose.yml up -d app_blue'
            }
        }
        stage('Health Check Blue') {
            steps {
                echo 'Performing health check on Blue version...'
                // Blue 버전 컨테이너가 기동할 시간을 주기 위해 잠시 대기 (필요에 따라 시간 조정)
                sh 'sleep 10'
                // /health 엔드포인트를 통해 Blue 버전이 정상 동작하는지 확인 (엔드포인트는 애플리케이션에 맞게 조정)
                sh 'curl --fail http://localhost:8889/health || (echo "Health check failed" && exit 1)'
            }
        }
        stage('Switch Traffic to Blue') {
            steps {
                echo 'Switching traffic to Blue version via Nginx update...'
                // Nginx 설정 파일은 docker-compose.yml과 동일한 경로의 ./nginx/conf.d 폴더에 위치
                // 아래 명령은 기존 upstream 설정에서 app_green을 app_blue로 변경합니다.
                sh '''
                  sed -i.bak 's/server app_green:8888;/server app_blue:8889;/' ./nginx/conf.d/spring_app.conf
                '''
                // Nginx 컨테이너 이름은 docker-compose.yml의 nginx 서비스로 가정 (필요시 container 이름 확인)
                sh 'docker exec nginx nginx -s reload'
            }
        }
        stage('Remove Green Version') {
            steps {
                echo 'Removing the Green version container...'
                // 기존 Green 버전 컨테이너를 제거하여 불필요한 리소스 사용을 줄입니다.
                sh 'docker-compose -f docker-compose.yml rm -f app_green'
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build and deployment succeeded!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}
