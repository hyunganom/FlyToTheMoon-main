pipeline {
    agent any
    tools {
        jdk 'JDK11'
        maven 'MAVEN_HOME'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Application') {
            steps {
                dir('study') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('study') {
                    sh "docker build --platform linux/amd64 -t rheonik/study-1.1 ."
                }
            }
        }
        stage('Blue-Green Deployment') {
            steps {
                script {
                    dir('study') {
                        // 1. 현재 활성 컨테이너 확인
                        def activeBlue = sh(
                            script: "docker ps --filter 'name=spring-blue' --format '{{.Names}}'",
                            returnStdout: true
                        ).trim()

                        def newVersion = ""
                        if (activeBlue) {
                            echo "현재 활성 컨테이너: spring-blue, 새로운 버전은 spring-green 배포"
                            newVersion = "spring-green"
                        } else {
                            echo "spring-blue가 실행 중이지 않거나 spring-green이 활성일 수 있음, spring-blue 배포"
                            newVersion = "spring-blue"
                        }

                        // 2. docker-compose로 새로운 컨테이너 기동
                        sh "docker-compose up -d ${newVersion}"

                        // 3. 신규 컨테이너 기동 후 충분한 시간 대기 (예: 45초)
                        echo "신규 컨테이너(${newVersion}) 기동 대기 중..."
                        sleep time: 45, unit: 'SECONDS'  // 필요에 따라 조정

                        // 헬스 체크: 포트 매핑 확인
                        if (newVersion == "spring-green") {
                            sh "curl --fail http://localhost:8889/actuator/health"
                        } else {
                            sh "curl --fail http://localhost:8888/actuator/health"
                        }

                        // 4. Nginx 설정 업데이트 및 재시작
                        if (newVersion == "spring-green") {
                            sh "cp nginx/nginx-green.conf nginx/nginx.conf"
                        } else {
                            sh "cp nginx/nginx-blue.conf nginx/nginx.conf"
                        }
                        sh "docker exec nginx-loadbalancer nginx -s reload"

                        // 5. 기존 컨테이너 종료 및 정리
                        if (newVersion == "spring-green") {
                            echo "기존 spring-blue 컨테이너 종료"
                            sh "docker-compose rm -sf spring-blue || true"
                        } else {
                            echo "기존 spring-green 컨테이너 종료"
                            sh "docker-compose rm -sf spring-green || true"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build and deployment succeeded!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}
